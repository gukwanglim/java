1. 프로그래밍을 하면 많은 오류 상황에 직면하게 된다. 기능이 많아질수록 오류가 발생할 확률은 기하급수적으로 증가한다. 자연스럽게 오류를 잘 처리하기 위한 방법들이 필요해지게 된다.
 예외(Exception)란 프로그램을 만든 프로그래머가 상정한 정상적인 처리에서 벗어나는 경우에 이를 처리하기 위한 방법이다.

 컴퓨터 프로그램은 나누기를 할 때, 0으로 나누게 되면 에러를 띄우게 된다.(사진 1번)

2. 사진 1번과 같은 예러가 발생했을때, 이것을 프로그램 상에서 에러를 띄우지 않고 넘기기 위해서는 사진 2번과 같이 try_catch 구문으로 예외처리를 해줘야 한다.
 즉, try 구문에서 벗어난 코드는 catch의 메개변수로 받은 Exception 타입의 e를 받아 따로 오류 표시를 해주는 것이다.

3. 예외의 핵심은 뒷수습이다. 하지만 제대로 된 수습은 대단히 어려운 문제이다.
 사진 3번과 같이 어느 부분에서 어떤 방식으로 오류가 발생한 것인지 정확히 띄울 수 있는 명령어가 존재하며 try 구문이 끝난 후에는 코드의 실행이 끝나는 것이 아니라 그 다음에 이어질 코드가 실행된다.

4. 사진 4번은 배열에 관한 에러로 배열의 범위 밖의 데이터를 불러올 때 발생한다.
 또한, 사진 4-2번과 같이 배열의 범위를 알맞게 설정한다 하여도 수식에서 문제가 발생할 경우 에러가 띄워진다.

 이처럼 수식 에러와 배열 에러는 비슷한 형식으로 표현이 된다. 그렇다면 서로 다른 에러를 다른 방식으로 표현하는 방법은 무엇일까?
 그 방법은 사진 5번과 같이 발생하게 되는 각각의 에러를 데이터 타입으로 설정하여 catch 구문을 돌리면 된다.

5. finally는 try 구문에서 예외가 발생하는 것과 상관없이 언제나 실행되는 로직이다.(사진 6번)

 finally는 주로 데이터 베이스에서 데이터를 가져오는 과정에 에러가 발생할 경우, 데이터 베이스와의 연결을 끊어주는 과정에서 사용된다.

6. API를 사용할 때 설계자의 의도에 따라서 예외를 반드시 처리해야 하는 경우가 있다. 
 사진 7번을 보면 out.txt라는 파일이 존재하지 않을 경우 발생하는 에러이다. 또한, IOException을 처리하고 있지 않다는 에러도 같이 있다.

 eclipse를 사용했을 경우 문제를 해결하기 위한 가장 간단한 방법은 붉은색 밑줄이 그어진 부분에 마우스를 올렸을 때, 나타나는 해결방안을 이용하는 것이다.(사진 7-1번/ 여기서는 아래줄을 사용.(사진 7-2번))
 만약, 붉은 밑줄이 그어져 있는 이유를 자세히 알고 싶다면 그 부분에 커서를 두고 F1키를 눌러 도움말을 확인할 수 있다.(사진 7-3번) 
 여기서 사진 7-3번의 밑줄을 따라 들어가보면 내가 알고 싶은 부분의 더욱 정확한 설명이 나오는데 그 중에서 throws라는 부분은 에러를 발생할 수 있으니 예외처리를 강제하라는 뜻이 된다.(사진 7-4번)

7. 위 사진 7-4번에서 보이는 throws의 사슬(연결)에 대해서 알아야 할 필요성이 있는데, throw는 보다 상위 클래서에서 예외처리를 하지 않고 하위 클래스에 넘기는 상황을 말한다.

8. 사진 8-1번을 보면 void run() throws FileNotFoundException{}에서 FileNotFoundException라는 에러를 자신의 하위 클래스에 예외처리를 넘겨주는 것을 강제하게 된다.
 그렇기 때문에 현재 class에서 예외처리를 하게된 지금의 상황(사진 8-1번)에서는 이 class의 하위 클래스에 에러가 뜬 모습을 볼 수 있다.
 이 문제를 해결하기 위해서는 상위 클래스의 예외처리를 지우고 하위 클래스에 예외처리를 넣으면 된다.(사진 8-2번)