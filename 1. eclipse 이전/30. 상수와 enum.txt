1. 사진 1번에서 private은 상황에 따라 다르기 때문에 신경 쓸 필요 없음. 대신 final은 한 번 정한 데이터가 변하지 않음을 의미.
 static은 지금 사용하고 있는 ConstantDemo class의 변수라는 의미.

 만약, 여기에 내용을 추가했을 경우 사진 1-2번처럼 변수명이 겹치는 문제가 발생할 수 있다. 물론, 변수명 앞에 어떤 범주에 들어가는 이름인지 추가하면 문제가 없지만, 코드가 복잡해 보일 수 있다.

 이런 문제를 해결하기 위해서는 사진 2번과 같이 interface를 사용하여 각 범주에 맞는 내용끼리 묶은 후, '인터페이스명.변수명'을 사용하면 된다.

 그런데 만약 과일 apple과 기업 apple의 값을 불러왔을 때, 그 정수가 같게 된다면 문제가 발생할 가능성이 생기는 것이다.(사진 3번) 좋은 코드는 이러한 가능성조차 예측하고 회피할 수 있어야한다.

 사진 3번과 같이 같은 범주의 내용이 아니어도 그 값을 가지고 비교할 수 있게 된다면 문제가 발생하기 때문에 같은 범주의 내용이 아니면 값을 비교하지 못하게 만들 수 있다.(사진 4번)
 사진 4번을 보면 인터페이스로 묶었던 Fruit와 Company를 class로 바꾼다면 if(Fruit.APPLE == Company.APPLE) 부분에 오류가 뜨는 모습을 볼 수 있다.

 하지만 if(Fruit.APPLE == Company.APPLE)을 사용하지 않는다 하여도 switch 구문에서 오류가 뜨는 모습을 확인할 수 있다. 그 이유는 switch 구문에 제한 사항이 많기 때문이다.(지난 시간의 switch 확인)

2. 위와 같은 문제에 사용할 수 있는 것이 enum이다. 
 enum은 열거형(enumerated type)이라고 부른다. 열거형은 '서로 연관된 상수들의 집합'이라고 할 수 있다. 위의 예제에서는 Fruit와 Company가 말하자면 열거인 셈이다.

3. 하지만 eclipse에서 enum을 사용했더니 the type java.lang.enum cannot be resolved. it is indirectly referenced from required .class files와 같은 오류가 발생했다.(사진 오류_1번)

4. 만약 오류가 뜨지 않는다면 잘 실행되어야한다.
 enum을 사용할 경우
    코드가 단순해진다. 인스턴스 생성과 상속을 방지한다. 키워드 enum을 사용하기 때문에 구현의 의도가 열거임을 분명하게 나타낼 수 있다.


현재는 enum에 문제가 있어서 나중에 다시 (https://www.youtube.com/watch?v=vFDsVdaZeao&list=PLuHgQVnccGMCeAy-2-llhw3nWoQKUvQck&index=141)